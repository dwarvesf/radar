{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.3.2",
    "schemaVersion": 1001,
    "oldestForwardsCompatibleVersion": 1001
  },
  "kind": "Package",
  "canonicalReference": "json-schema-typed",
  "docComment": "",
  "name": "json-schema-typed",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "",
      "name": "",
      "members": [
        {
          "kind": "Interface",
          "canonicalReference": "(JSONSchema:interface)",
          "docComment": "/**\n * JSON Schema\n *\n * Documentation corresponds to the work-in-progress draft-07 of JSON Schema.\n *\n * The latest published drafts are: - draft-handrews-json-schema-01 - draft-handrews-json-schema-validation-01\n *\n * For more information, visit: http://json-schema.org/.\n *\n * Draft date: March 19, 2018.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "JSONSchema"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "JSONSchema",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "$comment",
              "docComment": "/**\n * This keyword is reserved for comments from schema authors to readers or maintainers of the schema. The value of this keyword MUST be a string. Implementations MUST NOT present this string to end users. Tools for editing schemas SHOULD support displaying and editing this keyword.\n *\n * The value of this keyword MAY be used in debug or error output which is intended for developers making use of schemas. Schema vocabularies SHOULD allow \"$comment\" within any object containing vocabulary keywords.\n *\n * Implementations MAY assume \"$comment\" is allowed unless the vocabulary specifically forbids it. Vocabularies MUST NOT specify any effect of \"$comment\" beyond what is described in this specification. Tools that translate other media types or programming languages to and from application/schema+json MAY choose to convert that media type or programming language's native comments to or from \"$comment\" values.\n *\n * The behavior of such translation when both native comments and \"$comment\" properties are present is implementation-dependent. Implementations SHOULD treat \"$comment\" identically to an unknown extension keyword.\n *\n * They MAY strip \"$comment\" values at any point during processing. In particular, this allows for shortening schemas when the size of deployed schemas is a concern. Implementations MUST NOT take any other action based on the presence, absence, or contents of \"$comment\" properties.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "$comment"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "$comment",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "$id",
              "docComment": "/**\n * The \"$id\" keyword defines a URI for the schema, and the base URI that other URI references within the schema are resolved against. A subschema's \"$id\" is resolved against the base URI of its parent schema. If no parent sets an explicit base with \"$id\", the base URI is that of the entire document, as determined per [RFC 3986 section 5][RFC3986].\n *\n * If present, the value for this keyword MUST be a string, and MUST represent a valid [URI-reference][RFC3986]. This value SHOULD be normalized, and SHOULD NOT be an empty fragment <#> or an empty string <>.\n *\n * [RFC3986]: http://json-schema.org/latest/json-schema-core.html#RFC3986\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "$id"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "$id",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "$ref",
              "docComment": "/**\n * The \"$ref\" keyword is used to reference a schema, and provides the ability to validate recursive structures through self-reference.\n *\n * An object schema with a \"$ref\" property MUST be interpreted as a \"$ref\" reference. The value of the \"$ref\" property MUST be a URI Reference. Resolved against the current URI base, it identifies the URI of a schema to use. All other properties in a \"$ref\" object MUST be ignored.\n *\n * The URI is not a network locator, only an identifier. A schema need not be downloadable from the address if it is a network-addressable URL, and implementations SHOULD NOT assume they should perform a network operation when they encounter a network-addressable URI.\n *\n * A schema MUST NOT be run into an infinite loop against a schema. For example, if two schemas \"#alice\" and \"#bob\" both have an \"allOf\" property that refers to the other, a naive validator might get stuck in an infinite recursive loop trying to validate the instance. Schemas SHOULD NOT make use of infinite recursive nesting like this; the behavior is undefined.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "$ref"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "$ref",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "$schema",
              "docComment": "/**\n * The \"$schema\" keyword is both used as a JSON Schema version identifier and the location of a resource which is itself a JSON Schema, which describes any schema written for this particular version.\n *\n * The value of this keyword MUST be a [URI][RFC3986] (containing a scheme) and this URI MUST be normalized. The current schema MUST be valid against the meta-schema identified by this URI.\n *\n * If this URI identifies a retrievable resource, that resource SHOULD be of media type \"application/schema+json\".\n *\n * The \"$schema\" keyword SHOULD be used in a root schema. It MUST NOT appear in subschemas.\n *\n * Values for this property are defined in other documents and by other parties. JSON Schema implementations SHOULD implement support for current and previous published drafts of JSON Schema vocabularies as deemed reasonable.\n *\n * [RFC3986]: http://json-schema.org/latest/json-schema-core.html#RFC3986\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "$schema"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "$schema",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "additionalItems",
              "docComment": "/**\n * The value of \"additionalItems\" MUST be a valid JSON Schema.\n *\n * This keyword determines how child instances validate for arrays, and does not directly validate the immediate instance itself.\n *\n * If \"items\" is an array of schemas, validation succeeds if every instance element at a position greater than the size of \"items\" validates against \"additionalItems\".\n *\n * Otherwise, \"additionalItems\" MUST be ignored, as the \"items\" schema (possibly the default value of an empty schema) is applied to all elements.\n *\n * Omitting this keyword has the same behavior as an empty schema.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "additionalItems"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchema"
                },
                {
                  "kind": "Content",
                  "text": " | boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "additionalItems",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "additionalProperties",
              "docComment": "/**\n * The value of \"additionalProperties\" MUST be a valid JSON Schema.\n *\n * This keyword determines how child instances validate for objects, and does not directly validate the immediate instance itself.\n *\n * Validation with \"additionalProperties\" applies only to the child values of instance names that do not match any names in \"properties\", and do not match any regular expression in \"patternProperties\".\n *\n * For all such properties, validation succeeds if the child instance validates against the \"additionalProperties\" schema.\n *\n * Omitting this keyword has the same behavior as an empty schema.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "additionalProperties"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchema"
                },
                {
                  "kind": "Content",
                  "text": " | boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "additionalProperties",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "allOf",
              "docComment": "/**\n * This keyword's value MUST be a non-empty array. Each item of the array MUST be a valid JSON Schema.\n *\n * An instance validates successfully against this keyword if it validates successfully against all schemas defined by this keyword's value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "allOf"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchema"
                },
                {
                  "kind": "Content",
                  "text": " | boolean)[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "allOf",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "anyOf",
              "docComment": "/**\n * This keyword's value MUST be a non-empty array. Each item of the array MUST be a valid JSON Schema.\n *\n * An instance validates successfully against this keyword if it validates successfully against at least one schema defined by this keyword's value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "anyOf"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchema"
                },
                {
                  "kind": "Content",
                  "text": " | boolean)[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "anyOf",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "const",
              "docComment": "/**\n * The value of this keyword MAY be of any type, including null.\n *\n * An instance validates successfully against this keyword if its value is equal to the value of the keyword.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "const"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "const",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "contains",
              "docComment": "/**\n * The value of this keyword MUST be a valid JSON Schema.\n *\n * An array instance is valid against \"contains\" if at least one of its elements is valid against the given schema.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "contains"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchema"
                },
                {
                  "kind": "Content",
                  "text": " | boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "contains",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "contentEncoding",
              "docComment": "/**\n * If the instance value is a string, this property defines that the string SHOULD be interpreted as binary data and decoded using the encoding named by this property. [RFC 2045, Sec 6.1][RFC2045] lists the possible values for this property.\n *\n * The value of this property SHOULD be ignored if the instance described is not a string.\n *\n * [RFC2045]: https://tools.ietf.org/html/rfc2045#section-6.1\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "contentEncoding"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchemaContentEncodingName"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchemaContentEncoding"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "contentEncoding",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "contentMediaType",
              "docComment": "/**\n * The value of this property must be a media type, as defined by [RFC 2046][RFC2046]. This property defines the media type of instances which this schema defines.\n *\n * The value of this property SHOULD be ignored if the instance described is not a string.\n *\n * If the \"contentEncoding\" property is not present, but the instance value is a string, then the value of this property SHOULD specify a text document type, and the character set SHOULD be the character set into which the JSON string value was decoded (for which the default is Unicode).\n *\n * [RFC2046]: https://tools.ietf.org/html/rfc2046\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "contentMediaType"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "contentMediaType",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "default",
              "docComment": "/**\n * There are no restrictions placed on the value of this keyword. When multiple occurrences of this keyword are applicable to a single sub-instance, implementations SHOULD remove duplicates.\n *\n * This keyword can be used to supply a default JSON value associated with a particular schema. It is RECOMMENDED that a default value be valid against the associated schema.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "default"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "default",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "definitions",
              "docComment": "/**\n * The \"definitions\" keywords provides a standardized location for schema authors to inline re-usable JSON Schemas into a more general schema. The keyword does not directly affect the validation result.\n *\n * This keyword's value MUST be an object. Each member value of this object MUST be a valid JSON Schema.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "definitions"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        ["
                },
                {
                  "kind": "Reference",
                  "text": "key"
                },
                {
                  "kind": "Content",
                  "text": ": string]: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchema"
                },
                {
                  "kind": "Content",
                  "text": " | boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "definitions",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "dependencies",
              "docComment": "/**\n * This keyword specifies rules that are evaluated if the instance is an object and contains a certain property.\n *\n * This keyword's value MUST be an object. Each property specifies a dependency. Each dependency value MUST be an array or a valid JSON Schema.\n *\n * If the dependency value is a subschema, and the dependency key is a property in the instance, the entire instance must validate against the dependency value.\n *\n * If the dependency value is an array, each element in the array, if any, MUST be a string, and MUST be unique. If the dependency key is a property in the instance, each of the items in the dependency value must be a property that exists in the instance.\n *\n * Omitting this keyword has the same behavior as an empty object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "dependencies"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        ["
                },
                {
                  "kind": "Reference",
                  "text": "key"
                },
                {
                  "kind": "Content",
                  "text": ": string]: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchema"
                },
                {
                  "kind": "Content",
                  "text": " | boolean | string[];\n    } | string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dependencies",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "description",
              "docComment": "/**\n * Can be used to decorate a user interface with explanation or information about the data produced.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "description"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "description",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "else",
              "docComment": "/**\n * This keyword's value MUST be a valid JSON Schema.\n *\n * When \"if\" is present, and the instance fails to validate against its subschema, then validation succeeds against this keyword if the instance successfully validates against this keyword's subschema.\n *\n * This keyword has no effect when \"if\" is absent, or when the instance successfully validates against its subschema. Implementations MUST NOT evaluate the instance against this keyword, for either validation or annotation collection purposes, in such cases.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "else"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchema"
                },
                {
                  "kind": "Content",
                  "text": " | boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "else",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "enum",
              "docComment": "/**\n * The value of this keyword MUST be an array. This array SHOULD have at least one element. Elements in the array SHOULD be unique.\n *\n * An instance validates successfully against this keyword if its value is equal to one of the elements in this keyword's array value.\n *\n * Elements in the array might be of any value, including null.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "enum"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enum",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "examples",
              "docComment": "/**\n * The value of this keyword MUST be an array. There are no restrictions placed on the values within the array. When multiple occurrences of this keyword are applicable to a single sub-instance, implementations MUST provide a flat array of all values rather than an array of arrays.\n *\n * This keyword can be used to provide sample JSON values associated with a particular schema, for the purpose of illustrating usage. It is RECOMMENDED that these values be valid against the associated schema.\n *\n * Implementations MAY use the value(s) of \"default\", if present, as an additional example. If \"examples\" is absent, \"default\" MAY still be used in this manner.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "examples"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "examples",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "exclusiveMaximum",
              "docComment": "/**\n * The value of \"exclusiveMaximum\" MUST be number, representing an exclusive upper limit for a numeric instance.\n *\n * If the instance is a number, then the instance is valid only if it has a value strictly less than (not equal to) \"exclusiveMaximum\".\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "exclusiveMaximum"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "exclusiveMaximum",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "exclusiveMinimum",
              "docComment": "/**\n * The value of \"exclusiveMinimum\" MUST be number, representing an exclusive lower limit for a numeric instance.\n *\n * If the instance is a number, then the instance is valid only if it has a value strictly greater than (not equal to) \"exclusiveMinimum\".\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "exclusiveMinimum"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "exclusiveMinimum",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "format",
              "docComment": "/**\n * The \"format\" keyword functions as both an [annotation][annotation] and as an [assertion][assertion]. While no special effort is required to implement it as an annotation conveying semantic meaning, implementing validation is non-trivial.\n *\n * Implementations MAY support the \"format\" keyword as a validation assertion. Should they choose to do so:\n *\n * - they SHOULD implement validation for attributes defined below; - they SHOULD offer an option to disable validation for this keyword.\n *\n * Implementations MAY add custom format attributes. Save for agreement between parties, schema authors SHALL NOT expect a peer implementation to support this keyword and/or custom format attributes.\n *\n * [annotation]: http://json-schema.org/latest/json-schema-validation.html#annotations [assertion]: http://json-schema.org/latest/json-schema-validation.html#assertions\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "format"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchemaFormat"
                },
                {
                  "kind": "Content",
                  "text": " | 'date' | 'date-time' | 'email' | 'full-date' | 'full-time' | 'hostname' | 'idn-email' | 'idn-hostname' | 'ipv4' | 'ipv6' | 'iri' | 'iri-reference' | 'json-pointer' | 'json-pointer-uri-fragment' | 'regex' | 'relative-json-pointer' | 'time' | 'uri' | 'uri-reference' | 'uri-template' | 'uuid'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "format",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "if",
              "docComment": "/**\n * This keyword's value MUST be a valid JSON Schema.\n *\n * This validation outcome of this keyword's subschema has no direct effect on the overall validation result. Rather, it controls which of the \"then\" or \"else\" keywords are evaluated.\n *\n * Instances that successfully validate against this keyword's subschema MUST also be valid against the subschema value of the \"then\" keyword, if present.\n *\n * Instances that fail to validate against this keyword's subschema MUST also be valid against the subschema value of the \"else\" keyword, if present.\n *\n * If [annotations][annotations] are being collected, they are collected from this keyword's subschema in the usual way, including when the keyword is present without either \"then\" or \"else\".\n *\n * [annotations]: http://json-schema.org/latest/json-schema-validation.html#annotations\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "if"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchema"
                },
                {
                  "kind": "Content",
                  "text": " | boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "if",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "items",
              "docComment": "/**\n * The value of \"items\" MUST be either a valid JSON Schema or an array of valid JSON Schemas.\n *\n * This keyword determines how child instances validate for arrays, and does not directly validate the immediate instance itself.\n *\n * If \"items\" is a schema, validation succeeds if all elements in the array successfully validate against that schema.\n *\n * If \"items\" is an array of schemas, validation succeeds if each element of the instance validates against the schema at the same position, if any.\n *\n * Omitting this keyword has the same behavior as an empty schema.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "items"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchema"
                },
                {
                  "kind": "Content",
                  "text": " | boolean | ("
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchema"
                },
                {
                  "kind": "Content",
                  "text": " | boolean)[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "items",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "maximum",
              "docComment": "/**\n * The value of \"maximum\" MUST be a number, representing an inclusive upper limit for a numeric instance.\n *\n * If the instance is a number, then this keyword validates only if the instance is less than or exactly equal to \"maximum\".\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "maximum"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maximum",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "maxItems",
              "docComment": "/**\n * The value of this keyword MUST be a non-negative integer.\n *\n * An array instance is valid against \"maxItems\" if its size is less than, or equal to, the value of this keyword.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "maxItems"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxItems",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "maxLength",
              "docComment": "/**\n * The value of this keyword MUST be a non-negative integer.\n *\n * A string instance is valid against this keyword if its length is less than, or equal to, the value of this keyword.\n *\n * The length of a string instance is defined as the number of its characters as defined by [RFC 7159][RFC7159].\n *\n * [RFC7159]: http://json-schema.org/latest/json-schema-validation.html#RFC7159\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "maxLength"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxLength",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "maxProperties",
              "docComment": "/**\n * The value of this keyword MUST be a non-negative integer.\n *\n * An object instance is valid against \"maxProperties\" if its number of properties is less than, or equal to, the value of this keyword.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "maxProperties"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxProperties",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "minimum",
              "docComment": "/**\n * The value of \"minimum\" MUST be a number, representing an inclusive lower limit for a numeric instance.\n *\n * If the instance is a number, then this keyword validates only if the instance is greater than or exactly equal to \"minimum\".\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "minimum"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minimum",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "minItems",
              "docComment": "/**\n * The value of this keyword MUST be a non-negative integer.\n *\n * An array instance is valid against \"minItems\" if its size is greater than, or equal to, the value of this keyword.\n *\n * Omitting this keyword has the same behavior as a value of 0.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "minItems"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minItems",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "minLength",
              "docComment": "/**\n * The value of this keyword MUST be a non-negative integer.\n *\n * A string instance is valid against this keyword if its length is greater than, or equal to, the value of this keyword.\n *\n * The length of a string instance is defined as the number of its characters as defined by [RFC 7159][RFC7159].\n *\n * Omitting this keyword has the same behavior as a value of 0.\n *\n * [RFC7159]: http://json-schema.org/latest/json-schema-validation.html#RFC7159\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "minLength"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minLength",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "minProperties",
              "docComment": "/**\n * The value of this keyword MUST be a non-negative integer.\n *\n * An object instance is valid against \"minProperties\" if its number of properties is greater than, or equal to, the value of this keyword.\n *\n * Omitting this keyword has the same behavior as a value of 0.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "minProperties"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minProperties",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "multipleOf",
              "docComment": "/**\n * The value of \"multipleOf\" MUST be a number, strictly greater than 0.\n *\n * A numeric instance is valid only if division by this keyword's value results in an integer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "multipleOf"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "multipleOf",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "not",
              "docComment": "/**\n * This keyword's value MUST be a valid JSON Schema.\n *\n * An instance is valid against this keyword if it fails to validate successfully against the schema defined by this keyword.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "not"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchema"
                },
                {
                  "kind": "Content",
                  "text": " | boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "not",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "oneOf",
              "docComment": "/**\n * This keyword's value MUST be a non-empty array. Each item of the array MUST be a valid JSON Schema.\n *\n * An instance validates successfully against this keyword if it validates successfully against exactly one schema defined by this keyword's value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "oneOf"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchema"
                },
                {
                  "kind": "Content",
                  "text": " | boolean[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "oneOf",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pattern",
              "docComment": "/**\n * The value of this keyword MUST be a string. This string SHOULD be a valid regular expression, according to the ECMA 262 regular expression dialect.\n *\n * A string instance is considered valid if the regular expression matches the instance successfully. Recall: regular expressions are not implicitly anchored.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "pattern"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "pattern",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "patternProperties",
              "docComment": "/**\n * The value of \"patternProperties\" MUST be an object. Each property name of this object SHOULD be a valid regular expression, according to the ECMA 262 regular expression dialect. Each property value of this object MUST be a valid JSON Schema.\n *\n * This keyword determines how child instances validate for objects, and does not directly validate the immediate instance itself. Validation of the primitive instance type against this keyword always succeeds.\n *\n * Validation succeeds if, for each instance name that matches any regular expressions that appear as a property name in this keyword's value, the child instance for that name successfully validates against each schema that corresponds to a matching regular expression.\n *\n * Omitting this keyword has the same behavior as an empty object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "patternProperties"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        ["
                },
                {
                  "kind": "Reference",
                  "text": "key"
                },
                {
                  "kind": "Content",
                  "text": ": string]: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchema"
                },
                {
                  "kind": "Content",
                  "text": " | boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "patternProperties",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "properties",
              "docComment": "/**\n * The value of \"properties\" MUST be an object. Each value of this object MUST be a valid JSON Schema.\n *\n * This keyword determines how child instances validate for objects, and does not directly validate the immediate instance itself.\n *\n * Validation succeeds if, for each name that appears in both the instance and as a name within this keyword's value, the child instance for that name successfully validates against the corresponding schema.\n *\n * Omitting this keyword has the same behavior as an empty object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "properties"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        ["
                },
                {
                  "kind": "Reference",
                  "text": "key"
                },
                {
                  "kind": "Content",
                  "text": ": string]: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchema"
                },
                {
                  "kind": "Content",
                  "text": " | boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "properties",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "propertyNames",
              "docComment": "/**\n * The value of \"propertyNames\" MUST be a valid JSON Schema.\n *\n * If the instance is an object, this keyword validates if every property name in the instance validates against the provided schema. Note the property name that the schema is testing will always be a string.\n *\n * Omitting this keyword has the same behavior as an empty schema.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "propertyNames"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchema"
                },
                {
                  "kind": "Content",
                  "text": " | boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "propertyNames",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "readOnly",
              "docComment": "/**\n * The value of this keywords MUST be a boolean. When multiple occurrences of this keyword are applicable to a single sub-instance, the resulting value MUST be true if any occurrence specifies a true value, and MUST be false otherwise.\n *\n * If \"readOnly\" has a value of boolean true, it indicates that the value of the instance is managed exclusively by the owning authority, and attempts by an application to modify the value of this property are expected to be ignored or rejected by that owning authority.\n *\n * An instance document that is marked as \"readOnly for the entire document MAY be ignored if sent to the owning authority, or MAY result in an error, at the authority's discretion.\n *\n * For example, \"readOnly\" would be used to mark a database-generated serial number as read-only.\n *\n * This keywords can be used to assist in user interface instance generation.\n *\n * @default false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "readOnly"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "readOnly",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "required",
              "docComment": "/**\n * The value of this keyword MUST be an array. Elements of this array, if any, MUST be strings, and MUST be unique.\n *\n * An object instance is valid against this keyword if every item in the array is the name of a property in the instance.\n *\n * Omitting this keyword has the same behavior as an empty array.\n *\n * @default []\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "required"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "required",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "then",
              "docComment": "/**\n * This keyword's value MUST be a valid JSON Schema.\n *\n * When \"if\" is present, and the instance successfully validates against its subschema, then validation succeeds against this keyword if the instance also successfully validates against this keyword's subschema.\n *\n * This keyword has no effect when \"if\" is absent, or when the instance fails to validate against its subschema. Implementations MUST NOT evaluate the instance against this keyword, for either validation or annotation collection purposes, in such cases.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "then"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchema"
                },
                {
                  "kind": "Content",
                  "text": " | boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "then",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "title",
              "docComment": "/**\n * Can be used to decorate a user interface with a short label about the data produced.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "title"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "title",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "type",
              "docComment": "/**\n * The value of this keyword MUST be either a string or an array. If it is an array, elements of the array MUST be strings and MUST be unique.\n *\n * String values MUST be one of the six primitive types (\"null\", \"boolean\", \"object\", \"array\", \"number\", or \"string\"), or \"integer\" which matches any number with a zero fractional part.\n *\n * An instance validates if and only if the instance is in any of the sets listed for this keyword.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "type"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchemaType"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchemaTypeName"
                },
                {
                  "kind": "Content",
                  "text": " | ("
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchemaType"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchemaTypeName"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 10
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "uniqueItems",
              "docComment": "/**\n * The value of this keyword MUST be a boolean.\n *\n * If this keyword has boolean value false, the instance validates successfully. If it has boolean value true, the instance validates successfully if all of its elements are unique.\n *\n * Omitting this keyword has the same behavior as a value of false.\n *\n * @default false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "uniqueItems"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "uniqueItems",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "writeOnly",
              "docComment": "/**\n * The value of this keyword MUST be a boolean. When multiple occurrences of this keyword is applicable to a single sub-instance, the resulting value MUST be true if any occurrence specifies a true value, and MUST be false otherwise.\n *\n * If \"writeOnly\" has a value of boolean true, it indicates that the value is never present when the instance is retrieved from the owning authority. It can be present when sent to the owning authority to update or create the document (or the resource it represents), but it will not be included in any updated or newly created version of the instance.\n *\n * An instance document that is marked as \"writeOnly\" for the entire document MAY be returned as a blank document of some sort, or MAY produce an error upon retrieval, or have the retrieval request ignored, at the authority's discretion.\n *\n * For example, \"writeOnly\" would be used to mark a password input field.\n *\n * These keywords can be used to assist in user interface instance generation. In particular, an application MAY choose to use a widget that hides input values as they are typed for write-only fields.\n *\n * @default false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "writeOnly"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "writeOnly",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "(JSONSchemaContentEncoding:enum)",
          "docComment": "/**\n * Content encoding strategy.\n *\n * {@link https://tools.ietf.org/html/rfc2045#section-6.1} {@link https://stackoverflow.com/questions/25710599/content-transfer-encoding-7bit-or-8-bit/28531705#28531705}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum "
            },
            {
              "kind": "Reference",
              "text": "JSONSchemaContentEncoding"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "JSONSchemaContentEncoding",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "7bit",
              "docComment": "/**\n * Only US-ASCII characters, which use the lower 7 bits for each character.\n *\n * Each line must be less than 1,000 characters.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'7bit' = "
                },
                {
                  "kind": "Content",
                  "text": "\"7bit\""
                }
              ],
              "releaseTag": "Public",
              "name": "7bit",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "8bit",
              "docComment": "/**\n * Allow extended ASCII characters which can use the 8th (highest) bit to indicate special characters not available in 7bit.\n *\n * Each line must be less than 1,000 characters.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'8bit' = "
                },
                {
                  "kind": "Content",
                  "text": "\"8bit\""
                }
              ],
              "releaseTag": "Public",
              "name": "8bit",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Base64",
              "docComment": "/**\n * Useful for data that is mostly non-text.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Base64"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"base64\""
                }
              ],
              "releaseTag": "Public",
              "name": "Base64",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Binary",
              "docComment": "/**\n * Same character set as 8bit, with no line length restriction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Binary"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"binary\""
                }
              ],
              "releaseTag": "Public",
              "name": "Binary",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "IETFToken",
              "docComment": "/**\n * An extension token defined by a standards-track RFC and registered with IANA.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "IETFToken"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"ietf-token\""
                }
              ],
              "releaseTag": "Public",
              "name": "IETFToken",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "QuotedPrintable",
              "docComment": "/**\n * Lines are limited to 76 characters, and line breaks are represented using special characters that are escaped.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "QuotedPrintable"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"quoted-printable\""
                }
              ],
              "releaseTag": "Public",
              "name": "QuotedPrintable",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "XToken",
              "docComment": "/**\n * The two characters \"X-\" or \"x-\" followed, with no intervening white space, by any token.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "XToken"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"x-token\""
                }
              ],
              "releaseTag": "Public",
              "name": "XToken",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "(JSONSchemaFormat:enum)",
          "docComment": "/**\n * String formats.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum "
            },
            {
              "kind": "Reference",
              "text": "JSONSchemaFormat"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "JSONSchemaFormat",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "Date",
              "docComment": "/**\n * A string instance is valid against this attribute if it is a valid representation according to the \"full-date\" production in [RFC 3339][RFC3339].\n *\n * [RFC3339]: http://json-schema.org/latest/json-schema-validation.html#RFC3339\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Date"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"date\""
                }
              ],
              "releaseTag": "Public",
              "name": "Date",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "DateTime",
              "docComment": "/**\n * A string instance is valid against this attribute if it is a valid representation according to the \"date-time\" production in [RFC 3339][RFC3339].\n *\n * [RFC3339]: http://json-schema.org/latest/json-schema-validation.html#RFC3339\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "DateTime"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"date-time\""
                }
              ],
              "releaseTag": "Public",
              "name": "DateTime",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Email",
              "docComment": "/**\n * A string instance is valid against these attributes if it is a valid Internet email address as defined by [RFC 5322, section 3.4.1][RFC5322].\n *\n * [RFC5322]: http://json-schema.org/latest/json-schema-validation.html#RFC5322\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Email"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"email\""
                }
              ],
              "releaseTag": "Public",
              "name": "Email",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Hostname",
              "docComment": "/**\n * As defined by [RFC 1034, section 3.1][RFC1034], including host names produced using the Punycode algorithm specified in [RFC 5891, section 4.4][RFC5891].\n *\n * [RFC1034]: http://json-schema.org/latest/json-schema-validation.html#RFC1034 [RFC5891]: http://json-schema.org/latest/json-schema-validation.html#RFC5891\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Hostname"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"hostname\""
                }
              ],
              "releaseTag": "Public",
              "name": "Hostname",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "IDNEmail",
              "docComment": "/**\n * A string instance is valid against these attributes if it is a valid Internet email address as defined by [RFC 6531][RFC6531].\n *\n * [RFC6531]: http://json-schema.org/latest/json-schema-validation.html#RFC6531\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "IDNEmail"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"idn-email\""
                }
              ],
              "releaseTag": "Public",
              "name": "IDNEmail",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "IDNHostname",
              "docComment": "/**\n * As defined by either [RFC 1034, section 3.1][RFC1034] as for hostname, or an internationalized hostname as defined by [RFC 5890, section 2.3.2.3][RFC5890].\n *\n * [RFC1034]: http://json-schema.org/latest/json-schema-validation.html#RFC1034 [RFC5890]: http://json-schema.org/latest/json-schema-validation.html#RFC5890\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "IDNHostname"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"idn-hostname\""
                }
              ],
              "releaseTag": "Public",
              "name": "IDNHostname",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "IPv4",
              "docComment": "/**\n * An IPv4 address according to the \"dotted-quad\" ABNF syntax as defined in [RFC 2673, section 3.2][RFC2673].\n *\n * [RFC2673]: http://json-schema.org/latest/json-schema-validation.html#RFC2673\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "IPv4"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"ipv4\""
                }
              ],
              "releaseTag": "Public",
              "name": "IPv4",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "IPv6",
              "docComment": "/**\n * An IPv6 address as defined in [RFC 4291, section 2.2][RFC4291].\n *\n * [RFC4291]: http://json-schema.org/latest/json-schema-validation.html#RFC4291\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "IPv6"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"ipv6\""
                }
              ],
              "releaseTag": "Public",
              "name": "IPv6",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "IRI",
              "docComment": "/**\n * A string instance is valid against this attribute if it is a valid IRI, according to [RFC3987][RFC3987].\n *\n * [RFC3987]: http://json-schema.org/latest/json-schema-validation.html#RFC3987\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "IRI"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"iri\""
                }
              ],
              "releaseTag": "Public",
              "name": "IRI",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "IRIReference",
              "docComment": "/**\n * A string instance is valid against this attribute if it is a valid IRI Reference (either an IRI or a relative-reference), according to [RFC3987][RFC3987].\n *\n * [RFC3987]: http://json-schema.org/latest/json-schema-validation.html#RFC3987\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "IRIReference"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"iri-reference\""
                }
              ],
              "releaseTag": "Public",
              "name": "IRIReference",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "JSONPointer",
              "docComment": "/**\n * A string instance is valid against this attribute if it is a valid JSON string representation of a JSON Pointer, according to [RFC 6901, section 5][RFC6901].\n *\n * [RFC6901]: http://json-schema.org/latest/json-schema-validation.html#RFC6901\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "JSONPointer"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"json-pointer\""
                }
              ],
              "releaseTag": "Public",
              "name": "JSONPointer",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "JSONPointerURIFragment",
              "docComment": "/**\n * A string instance is valid against this attribute if it is a valid JSON string representation of a JSON Pointer fragment, according to [RFC 6901, section 5][RFC6901].\n *\n * [RFC6901]: http://json-schema.org/latest/json-schema-validation.html#RFC6901\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "JSONPointerURIFragment"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"json-pointer-uri-fragment\""
                }
              ],
              "releaseTag": "Public",
              "name": "JSONPointerURIFragment",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "RegEx",
              "docComment": "/**\n * This attribute applies to string instances.\n *\n * A regular expression, which SHOULD be valid according to the [ECMA 262][ecma262] regular expression dialect.\n *\n * Implementations that validate formats MUST accept at least the subset of [ECMA 262][ecma262] defined in the [Regular Expressions][regexInterop] section of this specification, and SHOULD accept all valid [ECMA 262][ecma262] expressions.\n *\n * [ecma262]: http://json-schema.org/latest/json-schema-validation.html#ecma262 [regexInterop]: http://json-schema.org/latest/json-schema-validation.html#regexInterop\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "RegEx"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"regex\""
                }
              ],
              "releaseTag": "Public",
              "name": "RegEx",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "RelativeJSONPointer",
              "docComment": "/**\n * A string instance is valid against this attribute if it is a valid [Relative JSON Pointer][relative-json-pointer].\n *\n * [relative-json-pointer]: http://json-schema.org/latest/json-schema-validation.html#relative-json-pointer\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "RelativeJSONPointer"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"relative-json-pointer\""
                }
              ],
              "releaseTag": "Public",
              "name": "RelativeJSONPointer",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Time",
              "docComment": "/**\n * A string instance is valid against this attribute if it is a valid representation according to the \"time\" production in [RFC 3339][RFC3339].\n *\n * [RFC3339]: http://json-schema.org/latest/json-schema-validation.html#RFC3339\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Time"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"time\""
                }
              ],
              "releaseTag": "Public",
              "name": "Time",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "URI",
              "docComment": "/**\n * A string instance is valid against this attribute if it is a valid URI, according to [RFC3986][RFC3986].\n *\n * [RFC3986]: http://json-schema.org/latest/json-schema-validation.html#RFC3986\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "URI"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"uri\""
                }
              ],
              "releaseTag": "Public",
              "name": "URI",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "URIReference",
              "docComment": "/**\n * A string instance is valid against this attribute if it is a valid URI Reference (either a URI or a relative-reference), according to [RFC3986][RFC3986].\n *\n * [RFC3986]: http://json-schema.org/latest/json-schema-validation.html#RFC3986\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "URIReference"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"uri-reference\""
                }
              ],
              "releaseTag": "Public",
              "name": "URIReference",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "URITemplate",
              "docComment": "/**\n * A string instance is valid against this attribute if it is a valid URI Template (of any level), according to [RFC6570][RFC6570].\n *\n * Note that URI Templates may be used for IRIs; there is no separate IRI Template specification.\n *\n * [RFC6570]: http://json-schema.org/latest/json-schema-validation.html#RFC6570\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "URITemplate"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"uri-template\""
                }
              ],
              "releaseTag": "Public",
              "name": "URITemplate",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "UUID",
              "docComment": "/**\n * UUID\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "UUID"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"uuid\""
                }
              ],
              "releaseTag": "Public",
              "name": "UUID",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "(JSONSchemaType:enum)",
          "docComment": "/**\n * JSON Schema type.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum "
            },
            {
              "kind": "Reference",
              "text": "JSONSchemaType"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "JSONSchemaType",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "Array",
              "docComment": "/**\n * Array\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Array"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"array\""
                }
              ],
              "releaseTag": "Public",
              "name": "Array",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Boolean",
              "docComment": "/**\n * Boolean\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Boolean"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"boolean\""
                }
              ],
              "releaseTag": "Public",
              "name": "Boolean",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Integer",
              "docComment": "/**\n * Integer\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Integer"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"integer\""
                }
              ],
              "releaseTag": "Public",
              "name": "Integer",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Null",
              "docComment": "/**\n * Null\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Null"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"null\""
                }
              ],
              "releaseTag": "Public",
              "name": "Null",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Number",
              "docComment": "/**\n * Number\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Number"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"number\""
                }
              ],
              "releaseTag": "Public",
              "name": "Number",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Object",
              "docComment": "/**\n * Object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Object"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"object\""
                }
              ],
              "releaseTag": "Public",
              "name": "Object",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "String",
              "docComment": "/**\n * String\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "String"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"string\""
                }
              ],
              "releaseTag": "Public",
              "name": "String",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "JSONSchemaContentEncodingName",
          "docComment": "/**\n * Content encoding name.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "JSONSchemaContentEncodingName"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "'7bit' | '8bit' | 'binary' | 'quoted-printable' | 'base64' | 'ietf-token' | 'x-token'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "JSONSchemaContentEncodingName",
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "JSONSchemaKeys",
          "docComment": "/**\n * An array containing all the possible keys of a draft-07 JSONSchema.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Reference",
              "text": "JSONSchemaKeys"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Content",
              "text": "(keyof "
            },
            {
              "kind": "Reference",
              "text": "JSONSchema"
            },
            {
              "kind": "Content",
              "text": ")[]"
            }
          ],
          "releaseTag": "Public",
          "name": "JSONSchemaKeys",
          "variableTypeTokenRange": {
            "startIndex": 2,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "JSONSchemaTypeName",
          "docComment": "/**\n * JSON Schema type.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "JSONSchemaTypeName"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "'array' | 'boolean' | 'integer' | 'null' | 'number' | 'object' | 'string'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "JSONSchemaTypeName",
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "JSONSchemaTypeValue",
          "docComment": "/**\n * Acceptable values for the \"type\" property.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "JSONSchemaTypeValue"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "JSONSchemaTypeName"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "JSONSchemaType"
            },
            {
              "kind": "Content",
              "text": " | ("
            },
            {
              "kind": "Reference",
              "text": "JSONSchemaType"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "JSONSchemaTypeName"
            },
            {
              "kind": "Content",
              "text": ")[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "JSONSchemaTypeValue",
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 11
          }
        }
      ]
    }
  ]
}
